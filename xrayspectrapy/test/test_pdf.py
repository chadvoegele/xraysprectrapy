import unittest
import xrayspectrapy as xsp

class PairDistFunctionTests(unittest.TestCase):
    def data_for_test1(self):
        return xsp.Structure([xsp.Atom(1.2455, 0.5367, -0.0729),
                              xsp.Atom(0.9239, -0.9952, 0.0237),
                              xsp.Atom(-0.1226, -0.7041, 1.1548)])

    def data_for_si_mp149(self):
        """Data from https://materialsproject.org/materials/mp-149/"""
        atom_data = ((0.375,0.375,0.375,"Si1"),
                     (0.125,0.125,0.625,"Si2"),
                     (0.375,0.875,0.875,"Si3"),
                     (0.125,0.625,0.125,"Si4"),
                     (0.875,0.375,0.875,"Si5"),
                     (0.625,0.125,0.125,"Si6"),
                     (0.875,0.875,0.375,"Si7"),
                     (0.625,0.625,0.625,"Si8"))
        l = 5.46872795719
        s = xsp.Structure([xsp.Atom(x*l, y*l, z*l, label)
                            for (x, y, z, label) in atom_data],
                            l)
        return s

    def data_for_gaas(self):
        atom_data = [(0.00,0.00,0.00),
                     (0.00,0.50,0.50),
                     (0.50,0.00,0.50),
                     (0.50,0.50,0.00),
                     (0.25,0.25,0.25),
                     (0.75,0.75,0.25),
                     (0.75,0.25,0.75),
                     (0.25,0.75,0.75)]
        c = 5.6536998749
        s = xsp.Structure([xsp.Atom(x*c, y*c, z*c) for (x, y, z) in atom_data], 
                          c)
        return s

    def test_pairwise_distances(self):
        expectedDistances = [0, 1.5683, 2.2178, 1.5683, 0, 1.5682,\
                2.2178, 1.5682, 0]
        structure = self.data_for_test1()
        distances = xsp.pdf.calc_distances(structure)
        
        for i in range(0, len(expectedDistances)):
            self.assertAlmostEqual(expectedDistances[i], distances[i], 4)

    def test_distances_with_repitition(self):
        s = self.data_for_gaas()
        distances = xsp.pdf.calc_distances_with_repetition(s, 10, False)
        expectedDistances = [2.4481, 2.4481, 2.4481, 2.4481, 3.9978, 3.9978,
            3.9978, 3.9978, 3.9978, 3.9978, 3.9978, 3.9978, 3.9978, 3.9978,
            3.9978, 3.9978, 4.6878, 4.6878, 4.6878, 4.6878, 4.6878, 4.6878,
            4.6878, 4.6878, 4.6878, 4.6878, 4.6878, 4.6878, 5.6537, 5.6537,
            5.6537, 5.6537, 5.6537, 5.6537, 6.161 , 6.161 , 6.161 , 6.161 ,
            6.161 , 6.161 , 6.161 , 6.161 , 6.161 , 6.161 , 6.161 , 6.161 ,
            6.9243, 6.9243, 6.9243, 6.9243, 6.9243, 6.9243, 6.9243, 6.9243,
            6.9243, 6.9243, 6.9243, 6.9243, 6.9243, 6.9243, 6.9243, 6.9243,
            6.9243, 6.9243, 6.9243, 6.9243, 6.9243, 6.9243, 6.9243, 6.9243,
            7.3444, 7.3444, 7.3444, 7.3444, 7.3444, 7.3444, 7.3444, 7.3444,
            7.3444, 7.3444, 7.3444, 7.3444, 7.3444, 7.3444, 7.3444, 7.3444,
            7.9955, 7.9955, 7.9955, 7.9955, 7.9955, 7.9955, 7.9955, 7.9955,
            7.9955, 7.9955, 7.9955, 7.9955, 8.3619, 8.3619, 8.3619, 8.3619,
            8.3619, 8.3619, 8.3619, 8.3619, 8.3619, 8.3619, 8.3619, 8.3619,
            8.3619, 8.3619, 8.3619, 8.3619, 8.3619, 8.3619, 8.3619, 8.3619,
            8.3619, 8.3619, 8.3619, 8.3619, 8.9393, 8.9393, 8.9393, 8.9393,
            8.9393, 8.9393, 8.9393, 8.9393, 8.9393, 8.9393, 8.9393, 8.9393,
            8.9393, 8.9393, 8.9393, 8.9393, 8.9393, 8.9393, 8.9393, 8.9393,
            8.9393, 8.9393, 8.9393, 8.9393, 9.2684, 9.2684, 9.2684, 9.2684,
            9.2684, 9.2684, 9.2684, 9.2684, 9.2684, 9.2684, 9.2684, 9.2684,
            9.7925, 9.7925, 9.7925, 9.7925, 9.7925, 9.7925, 9.7925, 9.7925,
            2.4481, 2.4481, 2.4481, 2.4481, 3.9978, 3.9978, 3.9978, 3.9978,
            3.9978, 3.9978, 3.9978, 3.9978, 3.9978, 3.9978, 3.9978, 3.9978,
            4.6878, 4.6878, 4.6878, 4.6878, 4.6878, 4.6878, 4.6878, 4.6878,
            4.6878, 4.6878, 4.6878, 4.6878, 5.6537, 5.6537, 5.6537, 5.6537,
            5.6537, 5.6537, 6.161 , 6.161 , 6.161 , 6.161 , 6.161 , 6.161 ,
            6.161 , 6.161 , 6.161 , 6.161 , 6.161 , 6.161 , 6.9243, 6.9243,
            6.9243, 6.9243, 6.9243, 6.9243, 6.9243, 6.9243, 6.9243, 6.9243,
            6.9243, 6.9243, 6.9243, 6.9243, 6.9243, 6.9243, 6.9243, 6.9243,
            6.9243, 6.9243, 6.9243, 6.9243, 6.9243, 6.9243, 7.3444, 7.3444,
            7.3444, 7.3444, 7.3444, 7.3444, 7.3444, 7.3444, 7.3444, 7.3444,
            7.3444, 7.3444, 7.3444, 7.3444, 7.3444, 7.3444, 7.9955, 7.9955,
            7.9955, 7.9955, 7.9955, 7.9955, 7.9955, 7.9955, 7.9955, 7.9955,
            7.9955, 7.9955, 8.3619, 8.3619, 8.3619, 8.3619, 8.3619, 8.3619,
            8.3619, 8.3619, 8.3619, 8.3619, 8.3619, 8.3619, 8.3619, 8.3619,
            8.3619, 8.3619, 8.3619, 8.3619, 8.3619, 8.3619, 8.3619, 8.3619,
            8.3619, 8.3619, 8.9393, 8.9393, 8.9393, 8.9393, 8.9393, 8.9393,
            8.9393, 8.9393, 8.9393, 8.9393, 8.9393, 8.9393, 8.9393, 8.9393,
            8.9393, 8.9393, 8.9393, 8.9393, 8.9393, 8.9393, 8.9393, 8.9393,
            8.9393, 8.9393, 9.2684, 9.2684, 9.2684, 9.2684, 9.2684, 9.2684,
            9.2684, 9.2684, 9.2684, 9.2684, 9.2684, 9.2684, 9.7925, 9.7925,
            9.7925, 9.7925, 9.7925, 9.7925, 9.7925, 9.7925, 2.4481, 2.4481,
            2.4481, 2.4481, 3.9978, 3.9978, 3.9978, 3.9978, 3.9978, 3.9978,
            3.9978, 3.9978, 3.9978, 3.9978, 3.9978, 3.9978, 4.6878, 4.6878,
            4.6878, 4.6878, 4.6878, 4.6878, 4.6878, 4.6878, 4.6878, 4.6878,
            4.6878, 4.6878, 5.6537, 5.6537, 5.6537, 5.6537, 5.6537, 5.6537,
            6.161 , 6.161 , 6.161 , 6.161 , 6.161 , 6.161 , 6.161 , 6.161 ,
            6.161 , 6.161 , 6.161 , 6.161 , 6.9243, 6.9243, 6.9243, 6.9243,
            6.9243, 6.9243, 6.9243, 6.9243, 6.9243, 6.9243, 6.9243, 6.9243,
            6.9243, 6.9243, 6.9243, 6.9243, 6.9243, 6.9243, 6.9243, 6.9243,
            6.9243, 6.9243, 6.9243, 6.9243, 7.3444, 7.3444, 7.3444, 7.3444,
            7.3444, 7.3444, 7.3444, 7.3444, 7.3444, 7.3444, 7.3444, 7.3444,
            7.3444, 7.3444, 7.3444, 7.3444, 7.9955, 7.9955, 7.9955, 7.9955,
            7.9955, 7.9955, 7.9955, 7.9955, 7.9955, 7.9955, 7.9955, 7.9955,
            8.3619, 8.3619, 8.3619, 8.3619, 8.3619, 8.3619, 8.3619, 8.3619,
            8.3619, 8.3619, 8.3619, 8.3619, 8.3619, 8.3619, 8.3619, 8.3619,
            8.3619, 8.3619, 8.3619, 8.3619, 8.3619, 8.3619, 8.3619, 8.3619,
            8.9393, 8.9393, 8.9393, 8.9393, 8.9393, 8.9393, 8.9393, 8.9393,
            8.9393, 8.9393, 8.9393, 8.9393, 8.9393, 8.9393, 8.9393, 8.9393,
            8.9393, 8.9393, 8.9393, 8.9393, 8.9393, 8.9393, 8.9393, 8.9393,
            9.2684, 9.2684, 9.2684, 9.2684, 9.2684, 9.2684, 9.2684, 9.2684,
            9.2684, 9.2684, 9.2684, 9.2684, 9.7925, 9.7925, 9.7925, 9.7925,
            9.7925, 9.7925, 9.7925, 9.7925, 2.4481, 2.4481, 2.4481, 2.4481,
            3.9978, 3.9978, 3.9978, 3.9978, 3.9978, 3.9978, 3.9978, 3.9978,
            3.9978, 3.9978, 3.9978, 3.9978, 4.6878, 4.6878, 4.6878, 4.6878,
            4.6878, 4.6878, 4.6878, 4.6878, 4.6878, 4.6878, 4.6878, 4.6878,
            5.6537, 5.6537, 5.6537, 5.6537, 5.6537, 5.6537, 6.161 , 6.161 ,
            6.161 , 6.161 , 6.161 , 6.161 , 6.161 , 6.161 , 6.161 , 6.161 ,
            6.161 , 6.161 , 6.9243, 6.9243, 6.9243, 6.9243, 6.9243, 6.9243,
            6.9243, 6.9243, 6.9243, 6.9243, 6.9243, 6.9243, 6.9243, 6.9243,
            6.9243, 6.9243, 6.9243, 6.9243, 6.9243, 6.9243, 6.9243, 6.9243,
            6.9243, 6.9243, 7.3444, 7.3444, 7.3444, 7.3444, 7.3444, 7.3444,
            7.3444, 7.3444, 7.3444, 7.3444, 7.3444, 7.3444, 7.3444, 7.3444,
            7.3444, 7.3444, 7.9955, 7.9955, 7.9955, 7.9955, 7.9955, 7.9955,
            7.9955, 7.9955, 7.9955, 7.9955, 7.9955, 7.9955, 8.3619, 8.3619,
            8.3619, 8.3619, 8.3619, 8.3619, 8.3619, 8.3619, 8.3619, 8.3619,
            8.3619, 8.3619, 8.3619, 8.3619, 8.3619, 8.3619, 8.3619, 8.3619,
            8.3619, 8.3619, 8.3619, 8.3619, 8.3619, 8.3619, 8.9393, 8.9393,
            8.9393, 8.9393, 8.9393, 8.9393, 8.9393, 8.9393, 8.9393, 8.9393,
            8.9393, 8.9393, 8.9393, 8.9393, 8.9393, 8.9393, 8.9393, 8.9393,
            8.9393, 8.9393, 8.9393, 8.9393, 8.9393, 8.9393, 9.2684, 9.2684,
            9.2684, 9.2684, 9.2684, 9.2684, 9.2684, 9.2684, 9.2684, 9.2684,
            9.2684, 9.2684, 9.7925, 9.7925, 9.7925, 9.7925, 9.7925, 9.7925,
            9.7925, 9.7925, 2.4481, 2.4481, 2.4481, 2.4481, 3.9978, 3.9978,
            3.9978, 3.9978, 3.9978, 3.9978, 3.9978, 3.9978, 3.9978, 3.9978,
            3.9978, 3.9978, 4.6878, 4.6878, 4.6878, 4.6878, 4.6878, 4.6878,
            4.6878, 4.6878, 4.6878, 4.6878, 4.6878, 4.6878, 5.6537, 5.6537,
            5.6537, 5.6537, 5.6537, 5.6537, 6.161 , 6.161 , 6.161 , 6.161 ,
            6.161 , 6.161 , 6.161 , 6.161 , 6.161 , 6.161 , 6.161 , 6.161 ,
            6.9243, 6.9243, 6.9243, 6.9243, 6.9243, 6.9243, 6.9243, 6.9243,
            6.9243, 6.9243, 6.9243, 6.9243, 6.9243, 6.9243, 6.9243, 6.9243,
            6.9243, 6.9243, 6.9243, 6.9243, 6.9243, 6.9243, 6.9243, 6.9243,
            7.3444, 7.3444, 7.3444, 7.3444, 7.3444, 7.3444, 7.3444, 7.3444,
            7.3444, 7.3444, 7.3444, 7.3444, 7.3444, 7.3444, 7.3444, 7.3444,
            7.9955, 7.9955, 7.9955, 7.9955, 7.9955, 7.9955, 7.9955, 7.9955,
            7.9955, 7.9955, 7.9955, 7.9955, 8.3619, 8.3619, 8.3619, 8.3619,
            8.3619, 8.3619, 8.3619, 8.3619, 8.3619, 8.3619, 8.3619, 8.3619,
            8.3619, 8.3619, 8.3619, 8.3619, 8.3619, 8.3619, 8.3619, 8.3619,
            8.3619, 8.3619, 8.3619, 8.3619, 8.9393, 8.9393, 8.9393, 8.9393,
            8.9393, 8.9393, 8.9393, 8.9393, 8.9393, 8.9393, 8.9393, 8.9393,
            8.9393, 8.9393, 8.9393, 8.9393, 8.9393, 8.9393, 8.9393, 8.9393,
            8.9393, 8.9393, 8.9393, 8.9393, 9.2684, 9.2684, 9.2684, 9.2684,
            9.2684, 9.2684, 9.2684, 9.2684, 9.2684, 9.2684, 9.2684, 9.2684,
            9.7925, 9.7925, 9.7925, 9.7925, 9.7925, 9.7925, 9.7925, 9.7925,
            2.4481, 2.4481, 2.4481, 2.4481, 3.9978, 3.9978, 3.9978, 3.9978,
            3.9978, 3.9978, 3.9978, 3.9978, 3.9978, 3.9978, 3.9978, 3.9978,
            4.6878, 4.6878, 4.6878, 4.6878, 4.6878, 4.6878, 4.6878, 4.6878,
            4.6878, 4.6878, 4.6878, 4.6878, 5.6537, 5.6537, 5.6537, 5.6537,
            5.6537, 5.6537, 6.161 , 6.161 , 6.161 , 6.161 , 6.161 , 6.161 ,
            6.161 , 6.161 , 6.161 , 6.161 , 6.161 , 6.161 , 6.9243, 6.9243,
            6.9243, 6.9243, 6.9243, 6.9243, 6.9243, 6.9243, 6.9243, 6.9243,
            6.9243, 6.9243, 6.9243, 6.9243, 6.9243, 6.9243, 6.9243, 6.9243,
            6.9243, 6.9243, 6.9243, 6.9243, 6.9243, 6.9243, 7.3444, 7.3444,
            7.3444, 7.3444, 7.3444, 7.3444, 7.3444, 7.3444, 7.3444, 7.3444,
            7.3444, 7.3444, 7.3444, 7.3444, 7.3444, 7.3444, 7.9955, 7.9955,
            7.9955, 7.9955, 7.9955, 7.9955, 7.9955, 7.9955, 7.9955, 7.9955,
            7.9955, 7.9955, 8.3619, 8.3619, 8.3619, 8.3619, 8.3619, 8.3619,
            8.3619, 8.3619, 8.3619, 8.3619, 8.3619, 8.3619, 8.3619, 8.3619,
            8.3619, 8.3619, 8.3619, 8.3619, 8.3619, 8.3619, 8.3619, 8.3619,
            8.3619, 8.3619, 8.9393, 8.9393, 8.9393, 8.9393, 8.9393, 8.9393,
            8.9393, 8.9393, 8.9393, 8.9393, 8.9393, 8.9393, 8.9393, 8.9393,
            8.9393, 8.9393, 8.9393, 8.9393, 8.9393, 8.9393, 8.9393, 8.9393,
            8.9393, 8.9393, 9.2684, 9.2684, 9.2684, 9.2684, 9.2684, 9.2684,
            9.2684, 9.2684, 9.2684, 9.2684, 9.2684, 9.2684, 9.7925, 9.7925,
            9.7925, 9.7925, 9.7925, 9.7925, 9.7925, 9.7925, 2.4481, 2.4481,
            2.4481, 2.4481, 3.9978, 3.9978, 3.9978, 3.9978, 3.9978, 3.9978,
            3.9978, 3.9978, 3.9978, 3.9978, 3.9978, 3.9978, 4.6878, 4.6878,
            4.6878, 4.6878, 4.6878, 4.6878, 4.6878, 4.6878, 4.6878, 4.6878,
            4.6878, 4.6878, 5.6537, 5.6537, 5.6537, 5.6537, 5.6537, 5.6537,
            6.161 , 6.161 , 6.161 , 6.161 , 6.161 , 6.161 , 6.161 , 6.161 ,
            6.161 , 6.161 , 6.161 , 6.161 , 6.9243, 6.9243, 6.9243, 6.9243,
            6.9243, 6.9243, 6.9243, 6.9243, 6.9243, 6.9243, 6.9243, 6.9243,
            6.9243, 6.9243, 6.9243, 6.9243, 6.9243, 6.9243, 6.9243, 6.9243,
            6.9243, 6.9243, 6.9243, 6.9243, 7.3444, 7.3444, 7.3444, 7.3444,
            7.3444, 7.3444, 7.3444, 7.3444, 7.3444, 7.3444, 7.3444, 7.3444,
            7.3444, 7.3444, 7.3444, 7.3444, 7.9955, 7.9955, 7.9955, 7.9955,
            7.9955, 7.9955, 7.9955, 7.9955, 7.9955, 7.9955, 7.9955, 7.9955,
            8.3619, 8.3619, 8.3619, 8.3619, 8.3619, 8.3619, 8.3619, 8.3619,
            8.3619, 8.3619, 8.3619, 8.3619, 8.3619, 8.3619, 8.3619, 8.3619,
            8.3619, 8.3619, 8.3619, 8.3619, 8.3619, 8.3619, 8.3619, 8.3619,
            8.9393, 8.9393, 8.9393, 8.9393, 8.9393, 8.9393, 8.9393, 8.9393,
            8.9393, 8.9393, 8.9393, 8.9393, 8.9393, 8.9393, 8.9393, 8.9393,
            8.9393, 8.9393, 8.9393, 8.9393, 8.9393, 8.9393, 8.9393, 8.9393,
            9.2684, 9.2684, 9.2684, 9.2684, 9.2684, 9.2684, 9.2684, 9.2684,
            9.2684, 9.2684, 9.2684, 9.2684, 9.7925, 9.7925, 9.7925, 9.7925,
            9.7925, 9.7925, 9.7925, 9.7925, 2.4481, 2.4481, 2.4481, 2.4481,
            3.9978, 3.9978, 3.9978, 3.9978, 3.9978, 3.9978, 3.9978, 3.9978,
            3.9978, 3.9978, 3.9978, 3.9978, 4.6878, 4.6878, 4.6878, 4.6878,
            4.6878, 4.6878, 4.6878, 4.6878, 4.6878, 4.6878, 4.6878, 4.6878,
            5.6537, 5.6537, 5.6537, 5.6537, 5.6537, 5.6537, 6.161 , 6.161 ,
            6.161 , 6.161 , 6.161 , 6.161 , 6.161 , 6.161 , 6.161 , 6.161 ,
            6.161 , 6.161 , 6.9243, 6.9243, 6.9243, 6.9243, 6.9243, 6.9243,
            6.9243, 6.9243, 6.9243, 6.9243, 6.9243, 6.9243, 6.9243, 6.9243,
            6.9243, 6.9243, 6.9243, 6.9243, 6.9243, 6.9243, 6.9243, 6.9243,
            6.9243, 6.9243, 7.3444, 7.3444, 7.3444, 7.3444, 7.3444, 7.3444,
            7.3444, 7.3444, 7.3444, 7.3444, 7.3444, 7.3444, 7.3444, 7.3444,
            7.3444, 7.3444, 7.9955, 7.9955, 7.9955, 7.9955, 7.9955, 7.9955,
            7.9955, 7.9955, 7.9955, 7.9955, 7.9955, 7.9955, 8.3619, 8.3619,
            8.3619, 8.3619, 8.3619, 8.3619, 8.3619, 8.3619, 8.3619, 8.3619,
            8.3619, 8.3619, 8.3619, 8.3619, 8.3619, 8.3619, 8.3619, 8.3619,
            8.3619, 8.3619, 8.3619, 8.3619, 8.3619, 8.3619, 8.9393, 8.9393,
            8.9393, 8.9393, 8.9393, 8.9393, 8.9393, 8.9393, 8.9393, 8.9393,
            8.9393, 8.9393, 8.9393, 8.9393, 8.9393, 8.9393, 8.9393, 8.9393,
            8.9393, 8.9393, 8.9393, 8.9393, 8.9393, 8.9393, 9.2684, 9.2684,
            9.2684, 9.2684, 9.2684, 9.2684, 9.2684, 9.2684, 9.2684, 9.2684,
            9.2684, 9.2684, 9.7925, 9.7925, 9.7925, 9.7925, 9.7925, 9.7925,
            9.7925, 9.7925]

        expectedDistances.sort()
        distances.sort()
        for i in range(0, len(expectedDistances)):
            self.assertAlmostEqual(expectedDistances[i], distances[i], 4)

    def test_pdf(self):
        s = self.data_for_si_mp149()
        bins = xsp.pdf.calc_bins(1.92, 7.04, 128)
        pdf = xsp.pdf.calc_pdf(s, 10, bins)
        pdf = xsp.pdf.smooth_image(pdf, 0.004)

        expectedDists = [1.92, 1.96, 2, 2.04, 2.08, 2.12, 2.16, 2.2, 2.24,
                2.28, 2.32, 2.36, 2.4, 2.44, 2.48, 2.52, 2.56, 2.6, 2.64, 2.68,
                2.72, 2.76, 2.8, 2.84, 2.88, 2.92, 2.96, 3, 3.04, 3.08, 3.12,
                3.16, 3.2, 3.24, 3.28, 3.32, 3.36, 3.4, 3.44, 3.48, 3.52, 3.56,
                3.6, 3.64, 3.68, 3.72, 3.76, 3.8, 3.84, 3.88, 3.92, 3.96, 4,
                4.04, 4.08, 4.12, 4.16, 4.2, 4.24, 4.28, 4.32, 4.36, 4.4, 4.44,
                4.48, 4.52, 4.56, 4.6, 4.64, 4.68, 4.72, 4.76, 4.8, 4.84, 4.88,
                4.92, 4.96, 5, 5.04, 5.08, 5.12, 5.16, 5.2, 5.24, 5.28, 5.32,
                5.36, 5.4, 5.44, 5.48, 5.52, 5.56, 5.6, 5.64, 5.68, 5.72, 5.76,
                5.8, 5.84, 5.88, 5.92, 5.96, 6, 6.04, 6.08, 6.12, 6.16, 6.2,
                6.24, 6.28, 6.32, 6.36, 6.4, 6.44, 6.48, 6.52, 6.56, 6.6, 6.64,
                6.68, 6.72, 6.76, 6.8, 6.84, 6.88, 6.92, 6.96, 7]
        expectedFreqs = [0.00000, 0.00000, 0.00001, 0.00007, 0.00030,
                0.00110, 0.00329, 0.00808, 0.01627, 0.02682, 0.03620, 0.04001,
                0.03620, 0.02682, 0.01627, 0.00808, 0.00328, 0.00109, 0.00030,
                0.00007, 0.00001, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
                0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
                0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00001,
                0.00008, 0.00034, 0.00124, 0.00372, 0.00915, 0.01843, 0.03039,
                0.04102, 0.04534, 0.04102, 0.03039, 0.01843, 0.00915, 0.00372,
                0.00124, 0.00034, 0.00009, 0.00007, 0.00025, 0.00089, 0.00269,
                0.00661, 0.01330, 0.02194, 0.02961, 0.03272, 0.02961, 0.02194,
                0.01330, 0.00661, 0.00269, 0.00089, 0.00024, 0.00005, 0.00001,
                0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00002, 0.00008,
                0.00031, 0.00093, 0.00228, 0.00459, 0.00757, 0.01022, 0.01130,
                0.01022, 0.00757, 0.00460, 0.00231, 0.00107, 0.00083, 0.00165,
                0.00387, 0.00776, 0.01279, 0.01726, 0.01908, 0.01726, 0.01279,
                0.00776, 0.00385, 0.00157, 0.00052, 0.00014, 0.00003, 0.00001,
                0.00001, 0.00005, 0.00022, 0.00082, 0.00246, 0.00605, 0.01218,
                0.02009, 0.02711, 0.02997, 0.02712, 0.02012, 0.01226, 0.00618,
                0.00261, 0.00094, 0.00030, 0.00008]

        for i in range(0, len(expectedDists)):
            self.assertAlmostEqual(expectedDists[i], pdf.distances[i], 5)

        for i in range(0, len(expectedFreqs)):
            self.assertAlmostEqual(expectedFreqs[i], pdf.frequencies[i], 5)

    def image_test_data1(self):
        distances = [0.049, 0.098, 0.147, 0.196, 0.245, 0.294, 0.343, 0.392,
                0.441, 0.49, 0.539, 0.588, 0.637, 0.686, 0.735, 0.784, 0.833,
                0.882, 0.931, 0.98, 1.029, 1.078, 1.127, 1.176, 1.225, 1.274,
                1.323, 1.372, 1.421, 1.47, 1.519, 1.568, 1.617, 1.666, 1.715,
                1.764, 1.813, 1.862, 1.911, 1.96, 2.009, 2.058, 2.107, 2.156,
                2.205, 2.254, 2.303, 2.352, 2.401, 2.45, 2.499, 2.548, 2.597,
                2.646, 2.695, 2.744, 2.793, 2.842, 2.891, 2.94, 2.989, 3.038,
                3.087, 3.136, 3.185, 3.234, 3.283, 3.332, 3.381, 3.43, 3.479,
                3.528, 3.577, 3.626, 3.675, 3.724, 3.773, 3.822, 3.871, 3.92,
                3.969, 4.018, 4.067, 4.116, 4.165, 4.214, 4.263, 4.312, 4.361,
                4.41, 4.459, 4.508, 4.557, 4.606, 4.655, 4.704, 4.753, 4.802,
                4.851, 4.9]
        frequencies = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 24, 0, 0, 48, 0, 0, 0, 0, 0, 0, 8, 0, 24, 0, 0,
                0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0,
                24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8]
        return (distances, frequencies)

    def test_gaussian_blur(self):
        (distances, frequencies) = self.image_test_data1()
        expectedFreqs = [0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
                0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
                0.00002, 0.00019, 0.00144, 0.00872, 0.04152, 0.15552, 0.45818,
                1.06168, 1.93499, 2.77389, 3.12774, 2.77417, 1.93715, 1.07476,
                0.52046, 0.38881, 0.72879, 1.60124, 2.90392, 4.16102, 4.69158,
                4.16084, 2.90248, 1.59255, 0.68755, 0.23545, 0.07542, 0.07593,
                0.23977, 0.71371, 1.71712, 3.36906, 5.53537, 7.87660, 9.96589,
                11.22490, 10.98028, 9.03185, 6.12909, 3.53869, 2.15174, 2.12350,
                3.10437, 4.49308, 5.55642, 5.68578, 4.81630, 3.59815, 3.04481,
                3.89306, 6.04261, 8.38467, 9.39630, 8.32384, 5.80524, 3.18508,
                1.37472, 0.46802, 0.13329, 0.06771, 0.16013, 0.46090, 1.07481,
                1.99728, 3.00718, 3.81497, 4.36641, 4.83747, 5.22251, 5.14974,
                4.31636, 2.94400, 1.60124, 0.68871, 0.23347, 0.06230, 0.01308,
                0.00217, 0.00037, 0.00075, 0.00436, 0.02078, 0.07802, 0.23210,
                0.55388, 1.08458, 1.79864, 2.61627]
        t = 0.005
        smoothedFrequencies = xsp.pdf.gaussian_blur(distances, frequencies, t)

        for i in range(0, len(expectedFreqs)):
            self.assertAlmostEqual(expectedFreqs[i], smoothedFrequencies[i], 4)

    def image_test_data2(self):
        distances = [1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6, 6.5, 7, 7.5, 8,
                     8.5, 9, 9.5, 10 ]
        frequencies = [-0.5, 0.5, 1, 0, 0, 0, 8.7, 10, 9.6, 4.5, 2.1, 0, -0.1,
                       -0.2, 3.1, 5, 6.8, 10, 9]
        return (distances, frequencies)

    def test_normalize_image(self):
        (distances, frequencies) = self.image_test_data2()
        im = xsp.Image(distances, frequencies)
        expectedFreqs = [ 0, 0.012658227848101, 0.018987341772152,
                          0.006329113924051, 0.006329113924051, 0.006329113924051,
                          0.116455696202532, 0.132911392405063, 0.127848101265823,
                          0.063291139240506, 0.032911392405063, 0.006329113924051,
                          0.005063291139241, 0.00379746835443 , 0.045569620253165,
                          0.069620253164557, 0.092405063291139, 0.132911392405063,
                          0.120253164556962]
        normed_image = xsp.pdf.normalize_image(im)

        for (expected, actual) in zip(expectedFreqs, normed_image.frequencies):
            self.assertAlmostEqual(expected, actual, 4)

if __name__ == '__main__':
    unittest.main()
