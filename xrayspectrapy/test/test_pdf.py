import unittest
import xrayspectrapy as xsp

class RadialDensityFunctionTests(unittest.TestCase):
    def data_for_test1(self):
        return xsp.Structure([xsp.Atom(1.2455, 0.5367, -0.0729),
                          xsp.Atom(0.9239, -0.9952, 0.0237),
                          xsp.Atom(-0.1226, -0.7041, 1.1548)])

    def data_for_test2(self):
        return xsp.Structure([xsp.Atom(0.375, 0.375, 0.375),
                          xsp.Atom(0.125, 0.125, 0.625),
                          xsp.Atom(0.375, 0.875, 0.875)])

    def test_pairwise_distances(self):
        expectedDistances = [1.5683, 2.2178, 1.5683, 1.5682, 2.2178, 1.5682]
        structure = self.data_for_test1()
        distances = xsp.pdf.calc_distances(structure)
        
        for i in range(0, len(expectedDistances)):
            self.assertAlmostEqual(expectedDistances[i], distances[i], 4)

    def test_pairwise_distances_with_repition(self):
        expectedDistances = [0.433, 0.8292, 0.8292, 1.299, 1.0897, 1.479, 1.479,
                1.6394, 1.299, 0.433, 1.479, 1.7854, 0.8292, 1.299, 1.9203,
                1.479, 1.299, 1.479, 0.433, 1.7854, 0.8292, 1.9203, 1.299,
                1.479, 0.8292, 1.0897, 1.0897, 0.433, 1.299, 0.8292, 0.8292,
                1.0897, 1.7854, 1.299, 1.299, 2.1651, 0.433, 1.7854, 1.7854,
                1.299, 1.479, 0.8292, 1.6394, 1.299, 1.0897, 0.433, 1.479,
                0.8292, 1.479, 1.6394, 0.8292, 1.299, 1.0897, 1.479, 0.433,
                0.8292, 1.9203, 1.479, 1.479, 1.7854, 0.8292, 1.299, 1.299,
                0.433, 0.7071, 1.2247, 1.5811, 1.5811, 1.8708, 1.8708, 2.1213,
                2.3452, 1.2247, 0.7071, 1.8708, 1.8708, 1.5811, 1.5811, 2.3452,
                2.1213, 0.7071, 1.2247, 0.7071, 1.5811, 1.2247, 1.8708, 1.5811,
                1.8708, 0.7071, 1.2247, 1.5811, 0.7071, 1.8708, 1.2247, 1.5811,
                1.8708, 1.2247, 0.7071, 1.2247, 1.8708, 0.7071, 1.5811, 1.8708,
                1.5811, 1.2247, 0.7071, 1.8708, 1.2247, 1.5811, 0.7071, 1.8708,
                1.5811, 0.7071, 1.2247, 0.7071, 0.7071, 1.2247, 1.2247, 0.7071,
                1.2247, 1.2247, 0.7071, 1.2247, 1.2247, 0.7071, 0.7071, 1.2247,
                0.7071, 0.433, 1.299, 1.299, 0.8292, 1.7854, 1.479, 1.479,
                1.9203, 0.8292, 0.433, 1.479, 1.0897, 1.299, 0.8292, 1.6394,
                1.479, 0.8292, 1.479, 0.433, 1.0897, 1.299, 1.6394, 0.8292,
                1.479, 1.299, 1.7854, 1.7854, 0.433, 2.1651, 1.299, 1.299,
                1.7854, 1.0897, 0.8292, 0.8292, 1.299, 0.433, 1.0897, 1.0897,
                0.8292, 1.479, 1.299, 1.9203, 0.8292, 1.7854, 0.433, 1.479,
                1.299, 1.479, 1.9203, 1.299, 0.8292, 1.7854, 1.479, 0.433,
                1.299, 1.6394, 1.479, 1.479, 1.0897, 1.299, 0.8292, 0.8292,
                0.433, 0.8292, 1.479, 1.7854, 1.479, 2.1651, 1.9203, 2.1651,
                2.4875, 1.0897, 0.8292, 1.9203, 1.6394, 1.7854, 1.479, 2.2776,
                2.1651, 0.433, 1.299, 0.8292, 1.299, 1.479, 1.7854, 1.479,
                1.9203, 1.0897, 1.6394, 1.9203, 0.8292, 2.2776, 1.479, 1.7854,
                2.1651, 0.8292, 0.433, 1.0897, 1.479, 0.8292, 1.299, 1.6394,
                1.479, 1.299, 1.0897, 2.0463, 1.0897, 1.9203, 0.8292, 1.9203,
                1.7854, 0.8292, 1.479, 1.0897, 0.433, 1.6394, 1.299, 0.8292,
                1.479, 1.0897, 0.8292, 1.299, 0.8292, 1.0897, 0.433, 1.0897,
                0.8292, 0.7071, 1.2247, 0.7071, 0.7071, 1.2247, 1.2247, 0.7071,
                1.2247, 1.2247, 0.7071, 1.2247, 1.2247, 0.7071, 0.7071, 1.2247,
                0.7071, 1.5811, 1.8708, 0.7071, 1.5811, 1.2247, 1.8708, 0.7071,
                1.2247, 1.5811, 1.8708, 1.5811, 0.7071, 1.8708, 1.2247, 0.7071,
                1.2247, 1.8708, 1.5811, 1.2247, 1.8708, 0.7071, 1.5811, 1.2247,
                0.7071, 1.8708, 1.5811, 1.8708, 1.2247, 1.5811, 0.7071, 1.2247,
                0.7071, 2.1213, 2.3452, 1.5811, 1.5811, 1.8708, 1.8708, 0.7071,
                1.2247, 2.3452, 2.1213, 1.8708, 1.8708, 1.5811, 1.5811, 1.2247,
                0.7071, 0.8292, 1.0897, 0.433, 1.0897, 0.8292, 1.299, 0.8292,
                1.0897, 1.479, 0.8292, 1.299, 1.6394, 0.433, 1.0897, 1.479,
                0.8292, 1.7854, 1.9203, 0.8292, 1.9203, 1.0897, 2.0463, 1.0897,
                1.299, 1.479, 1.6394, 1.299, 0.8292, 1.479, 1.0897, 0.433,
                0.8292, 2.1651, 1.7854, 1.479, 2.2776, 0.8292, 1.9203, 1.6394,
                1.0897, 1.9203, 1.479, 1.7854, 1.479, 1.299, 0.8292, 1.299,
                0.433, 2.1651, 2.2776, 1.479, 1.7854, 1.6394, 1.9203, 0.8292,
                1.0897, 2.4875, 2.1651, 1.9203, 2.1651, 1.479, 1.7854, 1.479,
                0.8292]

        structure = self.data_for_test2()
        distances = xsp.pdf.calc_distances_with_repetition(
                        structure, 1)
        
        expectedDistances.sort()
        distances.sort()
        for i in range(0, len(expectedDistances)):
            self.assertAlmostEqual(expectedDistances[i], distances[i], 4)


if __name__ == '__main__':
    unittest.main()
